#!/usr/bin/env ruby

require File.expand_path('../../lib/riemann/tools', __FILE__)

class Riemann::Tools::Rabbitmq
  include Riemann::Tools

  require 'faraday'
  require 'json'
  require 'uri'


  opt :read_timeout, 'Faraday read timeout', :type => :int, :default => 5
  opt :open_timeout, 'Faraday open timeout', :type => :int, :default => 5

  opt :monitor_user, 'RabbitMQ monitoring user', :type => :string
  opt :monitor_pass, 'RabbitMQ monitoring user password', :type => :string
  opt :monitor_port, 'RabbitMQ monitoring port', :default => 15672
  opt :monitor_host, 'RabbitMQ monitoring host', :default => "localhost"

  def endpoint(path)
    "http://#{options[:monitor_user]}:#{options[:monitor_pass]}@#{options[:monitor_host]}:#{options[:monitor_port]}#{path}"
  end

  def event_host
    options[:event_host] || options[:monitor_host]
  end

  def get(uri)
    connection = Faraday.new(uri) do |c|
      c.use Faraday::Response::RaiseError
      c.use Faraday::Adapter::NetHttp
    end
    response = connection.get do |req|
      req.options[:timeout] = options[:read_timeout]
      req.options[:open_timeout] = options[:open_timeout]
    end
    JSON.parse(response.body)
  end

  def short_host(hostname)
    (hostname =~ /^(\w+)(\.|$)/ ? $1 : hostname)
  end

  def get_in(record, path)
    path.inject(record) {|obj, field| (obj || {})[field]}
  end

  def tick
    host = short_host(event_host)
    begin
      overview = get(endpoint("/api/overview"))

      rates = { "publish_rate" => %w{message_stats publish_details rate},
                "ack_rate"     => %w{message_stats ack_details rate} }

      rates.each do |metric, path|
        value = get_in(overview, path)
        report(:service => "rabbitmq #{host} overview #{metric}", :metric => value) unless value.nil?
      end

      queues = get(endpoint("/api/queues"))

      queue_metrics = rates.merge({ "messages"  => %w{messages},
                                    "consumers" => %w{consumers} })
      queues.each do |q|
        queue_name = q["name"].gsub(/\W+/, '_')
        queue_metrics.each do |metric, path|
          value = get_in(q, path)
          report(:service => "rabbitmq #{host} #{queue_name} #{metric}", :metric => value) unless value.nil?
        end
      end
      report(:service => "rabbitmq #{host} monitoring", :metric => 0)
    rescue => e
      puts e.message
      puts e.backtrace
      report(:service => "rabbitmq #{host} monitoring", :metric => 1)
    end
  end
end

Riemann::Tools::Rabbitmq.run
